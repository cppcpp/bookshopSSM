<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	id="WebApp_ID" version="3.0">
	<welcome-file-list>
	    <welcome-file>/login.html</welcome-file>
	</welcome-file-list>
	
	<!-- default：tomcat服务器处理静态资源的默认servlet -->
	<servlet-mapping>
	    <servlet-name>default</servlet-name>
	    <!-- <url-pattern>*.jsp</url-pattern> -->
	    <url-pattern>*.html</url-pattern>
	    <url-pattern>/css/*</url-pattern>
	    <url-pattern>/fonts/*</url-pattern>
	    <url-pattern>/img/*</url-pattern>
	    <url-pattern>/js/*</url-pattern>
	</servlet-mapping>
	<!--spring : ContextLoaderListener -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:applicationContext.xml</param-value>
	</context-param>
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<listener>
        <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
 	</listener>

	<!-- springmvc : DispatcherServlet -->
	<servlet>
		<servlet-name>spring-webmvc</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<!-- spring mvc 下配置文件的名称及路径 -->
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:springMVC.xml</param-value>
		</init-param>
		<!-- >=0时，表示在容器启动时就加载这个servlet，数字越大，级别越高 -->
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>spring-webmvc</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	
	<!-- SpringSecurity
	将工作委托给javax.servlet.Filter的一个实现类,这个实现类将注入spring容器
	拦截发往应用的请求，将请求委托给ID为springSecurityFilterChain的Bean
	此Bean已经注册到spring上下文中-->
	<!-- <filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping> -->

	<!-- 自定义的权限过滤器  -->
	<!-- <filter>
		<filter-name>securityFilter</filter-name>
		<filter-class>com.njxz.exam.intercept.SecurityFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>securityFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping> -->
		
	
	<!-- 字符集过滤器 -->
	<filter>
		<filter-name>CharacterEncodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>CharacterEncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!--log4J -->
	<context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>classpath:log4j.properties</param-value>
	</context-param>
	<!-- 6000：开一条watchdog线程每60秒扫描配置文件的变化，便于改变输出日志的地点 -->
	<context-param>
		<param-name>log4jRefreshInterval</param-name>
		<param-value>6000</param-value>
	</context-param>
	<listener>
		<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
	</listener>
</web-app>

